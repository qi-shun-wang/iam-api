version: "3.4"
services:
  web_api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - env=docker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/v1/health/db"]
      interval: 2s
      timeout: 10s
      retries: 3
      start_period: 10s
    image: ${TYPE}_${PROJECT_NAME}_web_api:${VERSION}
    container_name: ${TYPE}_${PROJECT_NAME}_web_api
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: "Host:dev.${DOMAIN_NAME}"
      traefik.backend: "${TYPE}-${PROJECT_NAME}-web-api"
      traefik.port: "80"
    depends_on:
      - sys_postgres
    environment:
      COOKIE_DOMAIN: ${COOKIE_DOMAIN}
      COOKIE_SECURE: ${COOKIE_SECURE}
      WEB_API_PATH: ${WEB_API_PATH}
      WEB_API_PORT: ${WEB_API_PORT}
      PSQL_LOGS: ${PSQL_LOGS}
      PSQL_HOSTNAME: sys_postgres
      PSQL_PORT: ${PSQL_PORT}
      PSQL_DATABASE_NAME: ${PSQL_DATABASE_NAME}
      PSQL_USERNAME: ${PSQL_USERNAME}
      PSQL_PASSWORD: ${PSQL_PASSWORD}
    ports:
    - 8080:80
    restart: always
    networks:
      - traefik

  sys_postgres:
    image: "postgres:latest"
    container_name: ${TYPE}_${PROJECT_NAME}_sys_postgres
    environment:
      POSTGRES_PASSWORD: ${PSQL_PASSWORD}
      POSTGRES_USER: ${PSQL_USERNAME}
      POSTGRES_DB: ${PSQL_DATABASE_NAME}
    expose:
      - ${PSQL_PORT}
    ports:
      - ${PSQL_PORT}:5432
    volumes:
      - sys_postgres_db:/var/lib/postgresql/data
    restart: always
    networks:
      - traefik

volumes:
  sys_postgres_db:
    name: ${TYPE}_${PROJECT_NAME}_sys_postgres_db

networks:
  traefik:
    external:
      name: traefik
